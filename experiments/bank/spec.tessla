in ubound: Events[Int]
in lbound: Events[Int]
in change: Events[Int]
in reset:  Events[Unit]
in balance: Events[Int]

in check_atleast: Events[Int]
in check_atmost: Events[Int]

def resetSum(events: Events[Int], resets: Events[Unit]): Events[Int] = cnt where {
    def curr : Events[Int] = merge3(on(resets, 0), last(cnt, events), 0)
    def cnt : Events[Int] = lift(curr, events,
                                 (c: Option[Int], e: Option[Int]) =>
			 	 if (isSome(e))
				  then Some(getSome(c) + getSome(e))
		                  else c)
}

def curr1 : Events[Int] = merge4(on(reset, 0), on(balance, 0), last(chg, change), 0)
def chg : Events[Int] = lift(curr1, change,
                             (c: Option[Int], e: Option[Int]) =>
			     if (isSome(e))
			      then Some(getSome(c) + getSome(e))
		              else c)

# we use -1 as invalid value
def curr2 : Events[Int] = merge4(on(reset, -1), balance, last(lb, change), -1)
def lb : Events[Int] = lift(curr2, lbound,
                             (c: Option[Int], e: Option[Int]) =>
			     if (isSome(e)) then
			        (if (isSome(c) && (getSome(c) > getSome(e)))
				 then c else e)
		              else c)


out lbound
out ubound
out change
out reset
out chg
out lb
