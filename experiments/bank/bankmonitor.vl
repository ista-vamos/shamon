stream type BankOutputEvent
{
	balance(account : int);
	depositTo(account : int);
	withdraw(account: int);
	transfer(fromAccount: int, toAccount: int);
	depositSuccess();
	withdrawSuccess();
	withdrawFail();
	transferSuccess();
	selectedAccount(account: int);
	readInput();
	login();
	numOut(num: int);
}

stream type BankInputEvent
{
	numIn(num : int);
	otherIn();
}

stream type BankEvent
{
	SawBalance(account : int, balance : int);
	SawDeposit(account : int, amount : int);
	SawWithdraw(account : int, amount : int);
	SawWithdrawFail(account : int, amount : int);
	SawTransfer(from_ : int, to_ : int, amount : int);
	SawTransferFail(from_ : int, to_ : int, amount : int);
	Clear();
}

event source In : BankInputEvent to autodrop(128)
event source Out : BankOutputEvent to autodrop(128)

globals
$$
    #include "./compiler/cfiles/intmap.h"
    intmap balances;
    intmap upper_bounds;
    intmap lower_bounds;
    int in_ahead=0;
    int in_processed=0;
    int out_processed=0;
    int current_account=0;
$$

startup
$$
init_intmap(&balances);
init_intmap(&upper_bounds);
init_intmap(&lower_bounds);
$$

cleanup
$$
printf("\nin_processed: %i, out_processed: %i\n", in_processed, out_processed);
destroy_intmap(&balances);
destroy_intmap(&upper_bounds);
destroy_intmap(&lower_bounds);
$$

arbiter : BankEvent
{
    rule set rs
    {
    	on In : hole(n) | where $$ true $$
    	$$
    	    $yield Clear();
	    ++in_processed;
    	$$
    	on Out : hole(n) | where $$ true $$
    	$$
    	    $yield Clear();
	    ++out_processed;
    	$$

    	on Out : balance(acc) numOut(amnt) |, In: numIn(action) | where $$ true $$
    	$$
		assert(action == 3);
    		$yield SawBalance(acc, amnt);
		current_account = acc;
		out_processed += 2;
	        ++in_processed;
    	$$

    	on Out : depositTo(acc) depositSuccess() |, In : numIn(action) numIn(amnt) | where $$ true $$
    	$$
	        assert(action == 1);
    		$yield SawDeposit(acc, amnt);
		current_account = acc;
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : withdraw(acc) withdrawSuccess() |, In : numIn(act) numIn(amnt) | where $$ true $$
    	$$
		assert(act == 2);
    		$yield SawWithdraw(acc, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : withdraw(acc) withdrawFail() |, In : numIn(act) numIn(amnt) | where $$ true $$
    	$$
	        assert(act == 2);
    		$yield SawWithdrawFail(acc, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : transfer(from_, to_) transferSuccess() |, In : numIn(acc) numIn(amnt) | where $$ true $$
    	$$
    		$yield SawTransfer(from_, to_, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : transfer(from_, to_) selectedAccount(acc) |, In : numIn(acc) numIn(amnt) | where $$ true $$
    	$$
    		$yield SawTransferFail(from_, to_, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : selectedAccount(acc) | where $$ true $$
    	$$
		current_account = acc;
		++out_processed;
    	$$

	on Out : login() |, In: 2 where $$ true $$
	$$
	    $drop 2 from In;
	    ++out_processed;
	    in_processed += 2;
	$$

	on Out : readInput() |, In: 1 where $$ true $$
	$$
	    $drop 1 from In;
	    ++out_processed;
	    ++in_processed;
	$$

	on Out : numOut(n) | where $$ true $$
	$$
	    ++out_processed;
	$$

    }
}

monitor(8)
{
	on Clear() where $$ true $$
	$$
	        printf("MON: Clear\n");
		intmap_clear(&balances);
		intmap_clear(&upper_bounds);
		intmap_clear(&lower_bounds);
	$$
	on SawBalance(account, balance) where $$ true $$
	$$
	        printf("MON: SawBalance(%d, %d)\n", account, balance);
	$$
	on SawWithdraw(account, balance) where $$ true $$
	$$
	        printf("MON: SawWithdraw(%d, %d)\n", account, balance);
	$$
	on SawWithdrawFail(account, balance) where $$ true $$
	$$
	        printf("MON: SawWithdrawFail(%d, %d)\n", account, balance);
	$$
	on SawTransfer(from_, to_, amount) where $$ true $$
	$$
	        printf("MON: SawTransfer(%d, %d, %d)\n", from_, to_, amount);
	$$
	on SawTransferFail(from_, to_, amount) where $$ true $$
	$$
	        printf("MON: SawTransferFail(%d, %d, %d)\n", from_, to_, amount);
	$$
}
