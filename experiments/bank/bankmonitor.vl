stream type BankOutputEvent
{
	balance(account : int);
	depositTo(account : int);
	withdraw(account: int);
	transfer(fromAccount: int, toAccount: int);
	depositSuccess();
	withdrawSuccess();
	withdrawFail();
	transferSuccess();
	selectedAccount(account: int);
	readInput();
	login();
	numOut(num: int);
}

stream type BankInputEvent
{
	numIn(num : int);
	otherIn();
}

stream type BankEvent
{
	SawBalance(account : int, balance : int);
	SawDeposit(account : int, amount : int);
	SawWithdraw(account : int, amount : int);
	SawWithdrawFail(account : int, amount : int);
	SawTransfer(from_ : int, to_ : int, amount : int);
	SawTransferFail(from_ : int, to_ : int, amount : int);
	Clear();
}

event source In : BankInputEvent to autodrop(128)
event source Out : BankOutputEvent to autodrop(128)

globals
$$
    #include "./compiler/cfiles/intmap.h"
    intmap balances;
    intmap upper_bounds;
    intmap lower_bounds;
    int current_account=0;
    int in_processed=0;
    int out_processed=0;
    int in_holes=0;
    int out_holes=0;
    int resetting_cnt = 0;
$$

startup
$$
init_intmap(&balances);
init_intmap(&upper_bounds);
init_intmap(&lower_bounds);
$$

cleanup
$$
printf("\nin_processed: %i, out_processed: %i\n", in_processed, out_processed);
printf("\nin_holes: %i, out_holes: %i\n", in_holes, out_holes);
fflush(stdout);
destroy_intmap(&balances);
destroy_intmap(&upper_bounds);
destroy_intmap(&lower_bounds);
$$

arbiter : BankEvent
{
    rule set working
    {
    	on In : hole(n) | where $$ true $$
    	$$
    	    $yield Clear();
	    ++in_holes;
	    printf("In: Hole(%d)\n", n);
            $switch to resetting;
    	$$

    	on Out : hole(n) | where $$ true $$
    	$$
    	    $yield Clear();
	    ++out_holes;
	    printf("Out: Hole(%d)\n", n);
            $switch to resetting;
    	$$

    	on Out : balance(acc) numOut(amnt) |, In: numIn(action) | where $$ true $$
    	$$
		assert(action == 3);
    		$yield SawBalance(acc, amnt);
		current_account = acc;
		out_processed += 2;
	        ++in_processed;
    	$$

    	on Out : depositTo(acc) depositSuccess() |, In : numIn(action) numIn(amnt) | where $$ true $$
    	$$
	        assert(action == 1);
    		$yield SawDeposit(acc, amnt);
		current_account = acc;
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : withdraw(acc) withdrawSuccess() |, In : numIn(act) numIn(amnt) | where $$ true $$
    	$$
		assert(act == 2);
    		$yield SawWithdraw(acc, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : withdraw(acc) withdrawFail() |, In : numIn(act) numIn(amnt) | where $$ true $$
    	$$
	        assert(act == 2);
    		$yield SawWithdrawFail(acc, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : transfer(from_, to_) transferSuccess() |, In : numIn(acc) numIn(amnt) | where $$ true $$
    	$$
    		$yield SawTransfer(from_, to_, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : transfer(from_, to_) selectedAccount(acc) |, In : numIn(acc) numIn(amnt) | where $$ true $$
    	$$
    		$yield SawTransferFail(from_, to_, amnt);
		out_processed += 2;
	        in_processed += 2;
    	$$

    	on Out : selectedAccount(acc) | where $$ true $$
    	$$
		current_account = acc;
		++out_processed;
    	$$

	on Out : login() |, In: 2 where $$ true $$
	$$
	    $drop 2 from In;
	    ++out_processed;
	    in_processed += 2;
	    printf("Login\n");
	$$

	on Out : readInput() |, In: 1 where $$ true $$
	$$
	    $drop 1 from In;
	    ++out_processed;
	    ++in_processed;
	$$

	on Out : numOut(n) | where $$ true $$
	$$
	    ++out_processed;
	$$
    }

    rule set resetting {
	on Out: login() readInput() |,
	   In : otherIn() otherIn() numIn(n) | where $$ n == 1 || n == 0 $$
	$$
	    $switch to working;
	    printf("Working back!\n");
	    resetting_cnt = 0;
	$$

	on Out : | login() where $$ true $$
	$$
            if (++resetting_cnt > 500) {
		$drop 1 from Out;
		resetting_cnt = 0;
            }
	$$

	on Out : 1 where $$ true $$
	$$
	    $drop 1 from Out;
	$$
    }
}

monitor(8)
{
	on Clear() where $$ true $$
	$$
		printf("Clear()\n");
		intmap_clear(&balances);
		intmap_clear(&upper_bounds);
		intmap_clear(&lower_bounds);
	$$
	on SawBalance(account, balance) where $$ true $$
	$$
		printf("SawBalance(%d, %d)\n", account, balance);
		int old_value=0;
		if(intmap_get(&balances, account, &old_value))
		{
			if(old_value != balance)
			{
				printf("Mismatched balance on account #%i: Expected %i, but got %i\n", account, old_value, balance);
				intmap_insert(&balances, account, balance);
			}
		}
		else
		{
			if(intmap_get(&upper_bounds, account, &old_value))
			{
				if(balance>old_value)
				{
					printf("Mismatched balance on account #%i: Expected at most %i, but got %i\n", account, old_value, balance);
				}
				intmap_remove(&upper_bounds, account);
			}
			if(intmap_get(&lower_bounds, account, &old_value))
			{
				if(balance<old_value)
				{
					printf("Mismatched balance on account #%i: Expected at least %i, but got %i\n", account, old_value, balance);
				}
				intmap_remove(&lower_bounds, account);
			}
			intmap_insert(&balances, account, balance);
		}
	$$
	on SawDeposit(account,amount) where $$ true $$
	$$
		printf("SawDeposit(%d, %d)\n", account, amount);
		int old_value=0;
		if(intmap_get(&balances, account, &old_value))
		{
			intmap_insert(&balances, account, old_value + amount);
		}
		else
		{
			if(intmap_get(&upper_bounds, account, &old_value))
			{
				intmap_insert(&upper_bounds, account, old_value + amount);
			}
			if(intmap_get(&lower_bounds, account, &old_value))
			{
				intmap_insert(&lower_bounds, account, old_value + amount);
			}
			else
			{
				intmap_insert(&lower_bounds, account, amount);
			}
		}
	$$
	on SawWithdraw(account, amount) where $$ true $$
	$$
		printf("SawWithdraw(%d, %d)\n", account, amount);
		int old_value=0;
		if(intmap_get(&balances, account, &old_value))
		{
			if(old_value >= amount)
			{
				intmap_insert(&balances, account, old_value - amount);
			}
			else
			{
				printf("Withdrawal of %i from account #%i should have failed based on balance %i\n", amount, account, old_value);
				intmap_remove(&balances, account);
			}
		}
		else
		{
			if(intmap_get(&upper_bounds, account, &old_value))
			{
				if(old_value >= amount)
				{
					intmap_insert(&upper_bounds, account, old_value - amount);
				}
				else
				{
					printf("Withdrawal of %i from account #%i should have failed based on upper balance bound %i\n", amount, account, old_value);
					intmap_remove(&upper_bounds, account);
				}
			}
			if(intmap_get(&lower_bounds, account, &old_value))
			{
				if(old_value >= amount)
				{
					intmap_insert(&lower_bounds, account, old_value - amount);
				}
				else
				{
					intmap_insert(&lower_bounds, account, 0);
				}
			}
		}
	$$
	on SawWithdrawFail(account, amount) where $$ true $$
	$$
		printf("SawWithdrawFail(%d, %d)\n", account, amount);
		int old_value=0;
		if(intmap_get(&balances, account, &old_value))
		{
			if(old_value >= amount)
			{
				printf("Withdrawal of %i from account #%i should have succeeded based on balance %i\n", amount, account, old_value);
				intmap_remove(&balances, account);
			}
		}
		else
		{
			if(intmap_get(&upper_bounds, account, &old_value))
			{
				if(old_value < amount)
				{
					intmap_insert(&upper_bounds, account, amount);
				}
			}
			else
			{
				intmap_insert(&upper_bounds, account, amount);
			}
			if(intmap_get(&lower_bounds, account, &old_value))
			{
				if(old_value >= amount)
				{
					printf("Withdrawal of %i from account #%i should have succeeded based on lower balance bound %i\n", amount, account, old_value);
					intmap_remove(&lower_bounds, account);
				}
			}
		}
	$$
	on SawTransfer(from_, to_, amount) where $$ true $$
	$$
		printf("SawTransfer(%d, %d, %d)\n", from_, to_, amount);
		int old_value=0;
		if(intmap_get(&balances, to_, &old_value))
		{
			intmap_insert(&balances, to_, old_value + amount);
		}
		else
		{
			if(intmap_get(&upper_bounds, to_, &old_value))
			{
				intmap_insert(&upper_bounds, to_, old_value + amount);
			}
			if(intmap_get(&lower_bounds, to_, &old_value))
			{
				intmap_insert(&lower_bounds, to_, old_value + amount);
			}
			else
			{
				intmap_insert(&lower_bounds, to_, amount);
			}
		}

		if(intmap_get(&balances, from_, &old_value))
		{
			if(old_value >= amount)
			{
				intmap_insert(&balances, from_, old_value - amount);
			}
			else
			{
				printf("Transfer of %i from account #%i should have failed based on balance %i\n", amount, from_, old_value);
				intmap_remove(&balances, from_);
			}
		}
		else
		{
			if(intmap_get(&upper_bounds, from_, &old_value))
			{
				if(old_value >= amount)
				{
					intmap_insert(&upper_bounds, from_, old_value - amount);
				}
				else
				{
					printf("Transfer of %i from account #%i should have failed based on upper balance bound %i\n", amount, from_, old_value);
					intmap_remove(&upper_bounds, from_);
				}
			}
			if(intmap_get(&lower_bounds, from_, &old_value))
			{
				if(old_value >= amount)
				{
					intmap_insert(&lower_bounds, from_, old_value - amount);
				}
				else
				{
					intmap_insert(&lower_bounds, from_, 0);
				}
			}
		}
	$$
	on SawTransferFail(from_, to_, amount) where $$ true $$
	$$
		printf("SawTransferFail(%d, %d, %d)\n", from_, to_, amount);
		int old_value=0;
		if(intmap_get(&balances, from_, &old_value))
		{
			if(old_value >= amount)
			{
				printf("Transfer of %i from account #%i should have succeeded based on balance %i\n", amount, from_, old_value);
				intmap_remove(&balances, from_);
			}
		}
		else
		{
			if(intmap_get(&upper_bounds, from_, &old_value))
			{
				if(old_value < amount)
				{
					intmap_insert(&upper_bounds, from_, amount);
				}
			}
			else
			{
				intmap_insert(&upper_bounds, from_, amount);
			}
			if(intmap_get(&lower_bounds, from_, &old_value))
			{
				if(old_value >= amount)
				{
					printf("Transfer of %i from account #%i should have succeeded based on lower balance bound %i\n", amount, from_, old_value);
					intmap_remove(&lower_bounds, from_);
				}
			}
		}
	$$

}
