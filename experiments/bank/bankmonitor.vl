stream type BankOutputEvent
{
	balance(account : int);
	depositTo(account : int);
	withdraw(account: int);
	transferTo(fromAccount: int);
	transferAmount(fromAccount: int);
	depositSuccess();
	withdrawSuccess();
	withdrawFail();
	transferSuccess();
	transferFail();
	invalidAccount();
	numOut(num: int);
}

stream type BankInputEvent
{
	numIn(num : int);
}

stream type BankEvent
{
	SawBalance(account : int, balance : int);
	SawDeposit(account : int, amount : int);
	SawWithdraw(account : int, amount : int);
	SawWithdrawFail(account : int, amount : int);
	SawTransfer(from_ : int, to_ : int, amount : int);
	SawTransferFail(from_ : int, to_ : int, amount : int);
	Clear();
}

event source In : BankInputEvent to autodrop(32)
event source Out : BankOutputEvent to autodrop(32)

globals
$$
    #include "./compiler/cfiles/intmap.h"
    intmap balances;
    intmap upper_bounds;
    intmap lower_bounds;
    int in_ahead=0;
    int out_ahead=0;
    int in_processed=0;
    int out_processed=0;
$$

startup
$$
init_intmap(&balances);
init_intmap(&upper_bounds);
init_intmap(&lower_bounds);
$$

cleanup
$$
printf("\nin_ahead: %i, out_ahead: %i\n", in_ahead, out_ahead);
printf("\nin_processed: %i, out_processed: %i\n", in_processed, out_processed);
destroy_intmap(&balances);
destroy_intmap(&upper_bounds);
destroy_intmap(&lower_bounds);
$$

arbiter : BankEvent
{
    rule set rs
    {
    	on In : hole(n) | where $$ true $$
    	$$
    	    printf("In: hole(%d)\n", n);
    	$$
    	on Out : hole(n) | where $$ true $$
    	$$
    	    printf("In: hole(%d)\n", n);
    		$yield Clear();
    	$$

    	on Int : numInt(n) | where $$ true $$
    	$$
    	    printf("In: numIn(%d)\n", n);
    	$$
    	on Out : numOut(n) | where $$ true $$
    	$$
    	    printf("Out: numOut(%d)\n", n);
    	$$

    	on Out : Balance(acc) |, In : NumberIn(amnt) | where $$ true $$
    	$$
    		$yield SawBalance(acc,amnt);
    		out_ahead++;
    		out_processed++;
    	$$

    	on In : 1 where $$ true $$
    	$$
    		$drop 1 from In;
    	$$

    	on Out : 1 where $$ true $$
    	$$
    		$drop 1 from Out;
    	$$
    }
}

monitor(8)
{
	on Clear() where $$ true $$
	$$
	        printf("MON: Clear\n");
		intmap_clear(&balances);
		intmap_clear(&upper_bounds);
		intmap_clear(&lower_bounds);
	$$
	on SawBalance(account, balance) where $$ true $$
	$$
	        printf("MON: SawBalance(%d, %d)\n", account, balance);
	$$
}
